# Super resolution

```elixir
Mix.install([
  {:tflite_beam, "0.2.1"},
  {:evision, "0.1.29"},
  {:kino, "~> 0.8.0"},
  {:req, "~> 0.3.0"}
])
```

## Introduction

The task of recovering a high resolution (HR) image from its low resolution
counterpart is commonly referred to as Single Image Super Resolution (SISR).

The model used here is [Enhanced Super-Resolution Generative Adversarial
Networks (ESRGAN)](https://arxiv.org/abs/1809.00219). And we are going to use TensorFlow Lite to run
inference on the pretrained model.

https://www.tensorflow.org/lite/examples/super_resolution/overview

## Download data files

* model using ESRGAN-TF2
* test image from tensorflow examples

```elixir
downloads_dir = System.tmp_dir!()
# for nerves demo user
# change to a directory with write-permission
# downloads_dir = "/data/livebook"

download = fn url ->
  save_as = Path.join(downloads_dir, URI.encode_www_form(url))

  unless File.exists?(save_as) do
    %{status: 200} = Req.get!(url, output: save_as)
  end

  save_as
end

data_files = %{
  model:
    "https://tfhub.dev/captain-pool/lite-model/esrgan-tf2/1?lite-format=tflite"
    |> download.(),
  test_img:
    "https://raw.githubusercontent.com/tensorflow/examples/master/lite/examples/super_resolution/android/app/src/main/assets/lr-1.jpg"
    |> download.()
}
```

## Alias modules

```elixir
alias Evision, as: Cv
alias TFLiteBEAM, as: TFLite
alias TFLiteBEAM.TFLiteTensor
```

## Generate a super resolution image using TensorFlow Lite

```elixir
lr =
  data_files.test_img
  |> Cv.imread()
  |> Cv.cvtColor(Cv.Constant.cv_COLOR_BGR2RGB())
  |> Cv.Mat.to_nx()
  |> Nx.new_axis(0)
  |> Nx.as_type({:f, 32})

# Load TFLite model and allocate tensors.
{:ok, interpreter} = TFLite.Interpreter.new(data_files.model)

# Get input and output tensors.
{:ok, input_tensors} = TFLite.Interpreter.inputs(interpreter)
{:ok, output_tensors} = TFLite.Interpreter.outputs(interpreter)

# Run the model
TFLite.Interpreter.input_tensor(interpreter, 0, Nx.to_binary(lr))
TFLite.Interpreter.invoke(interpreter)

# Extract the output and postprocess it
{:ok, output_data} = TFLite.Interpreter.output_tensor(interpreter, 0)
%TFLiteTensor{} = out_tensor = TFLite.Interpreter.tensor(interpreter, Enum.at(output_tensors, 0))
[1 | shape] = TFLite.TFLiteTensor.dims(out_tensor)
type = TFLite.TFLiteTensor.type(out_tensor)

sr =
  output_data
  |> Nx.from_binary(type)
  |> Nx.reshape(List.to_tuple(shape))
  |> Nx.clip(0, 255)
  |> Nx.as_type({:u, 8})
```

## Visualize the result

```elixir
data_files.test_img
|> Cv.imread()
```

```elixir
sr
|> Cv.Mat.from_nx_2d()
|> Cv.cvtColor(Cv.Constant.cv_COLOR_RGB2BGR())
```

