name: linux-precompile

on:
  push:
    tags:
      - 'v*'
      - 'precompile-test'
      - 'precompile-test-linux'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  precompile:
    runs-on: ubuntu-20.04
    env:
      TFLITE_BEAM_PREFER_PRECOMPILED: NO
    name: Linux ${{ matrix.pair.target_arch }}-${{ matrix.pair.target_os }}-${{ matrix.pair.target_abi }} - OTP ${{ matrix.otp }}

    strategy:
      fail-fast: false
      matrix:
        otp: ["25.x", "26.x"]
        include:
          - pair:
              arch_name: x86_64
              cmake_toolchain_file: ""
              c_compiler: gcc
              cpp_compiler: g++
              libedgetpu_library: "x86_64"
              target_arch: "x86_64"
              target_os: "linux"
              target_abi: "gnu"
          - pair:
              arch_name: aarch64
              cmake_toolchain_file: cc_toolchain/aarch64-linux-gnu.cmake
              c_compiler: gcc-aarch64-linux-gnu
              cpp_compiler: g++-aarch64-linux-gnu
              libedgetpu_library: "aarch64"
              target_arch: "aarch64"
              target_os: "linux"
              target_abi: "gnu"
              cc: "/usr/bin/aarch64-linux-gnu-gcc"
              cxx: "/usr/bin/aarch64-linux-gnu-g++"
          - pair:
              arch_name: armv7l
              cmake_toolchain_file: cc_toolchain/armv7l-linux-gnueabihf.cmake
              c_compiler: gcc-arm-linux-gnueabihf
              cpp_compiler: g++-arm-linux-gnueabihf
              libedgetpu_library: "armv7l"
              target_arch: "armv7l"
              target_os: "linux"
              target_abi: "gnueabihf"
              cc: "/usr/bin/arm-linux-gnueabihf-gcc"
              cxx: "/usr/bin/arm-linux-gnueabihf-g++"
          - pair:
              arch_name: riscv64
              cmake_toolchain_file: cc_toolchain/riscv64-linux-gnu.cmake
              c_compiler: gcc-riscv64-linux-gnu
              cpp_compiler: g++-riscv64-linux-gnu
              libedgetpu_library: "riscv64"
              target_arch: "riscv64"
              target_os: "linux"
              target_abi: "gnu"
              cc: "/usr/bin/riscv64-linux-gnu-gcc"
              cxx: "/usr/bin/riscv64-linux-gnu-g++"

    steps:
      - uses: actions/checkout@v3

      - uses: erlef/setup-beam@v1
        with:
          otp-version: ${{ matrix.otp }}

      - name: Install system dependecies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential automake autoconf pkg-config bc m4 unzip zip curl git libssl-dev gzip libncurses5-dev ca-certificates ${{ matrix.pair.c_compiler }} ${{ matrix.pair.cpp_compiler }}

      - name: Create precompiled library
        run: |
          export NIF_VERSION="$(erl -noshell -eval "io:format('~ts', [erlang:system_info(nif_version)])." -s erlang halt)"
          if [ "${{ matrix.pair.cmake_toolchain_file }}" != "" ]; then
            export CMAKE_TOOLCHAIN_FILE="$(pwd)/${{ matrix.pair.cmake_toolchain_file }}"
            export CC="${{ matrix.pair.cc }}"
            export CXX="${{ matrix.pair.cxx }}"
            export TARGET_ARCH="${{ matrix.pair.target_arch }}"
            export TARGET_OS="${{ matrix.pair.target_os }}"
            export TARGET_ABI="${{ matrix.pair.target_abi }}"
            export TFLITE_BEAM_CORAL_LIBEDGETPU_LIBRARIES="${{ matrix.pair.libedgetpu_library }}"
          fi

          export TFLITE_BEAM_PREFER_PRECOMPILED="false"

          echo "CMAKE_TOOLCHAIN_FILE: ${CMAKE_TOOLCHAIN_FILE}"
          echo "TFLITE_BEAM_CORAL_LIBEDGETPU_LIBRARIES: ${TFLITE_BEAM_CORAL_LIBEDGETPU_LIBRARIES}"
          echo "TFLITE_BEAM_PREFER_PRECOMPILED: ${TFLITE_BEAM_PREFER_PRECOMPILED}"
          echo "CC: ${CC}"
          echo "CXX: ${CXX}"
          echo "TARGET_ARCH: ${TARGET_ARCH}"
          echo "TARGET_OS: ${TARGET_OS}"
          echo "TARGET_ABI: ${TARGET_ABI}"

          rebar3 deps
          rebar3 compile
          export PKG_NAME=tflite_beam-nif-${NIF_VERSION}-${{ matrix.pair.arch_name }}-${{ matrix.pair.target_os }}-${{ matrix.pair.target_abi }}-${GITHUB_REF##*/}
          mkdir -p "${PKG_NAME}"
          cp -a ./priv "${PKG_NAME}"
          tar -czf "${PKG_NAME}.tar.gz" "${PKG_NAME}"
          rm -rf "${PKG_NAME}"
          ls -lah "${PKG_NAME}.tar.gz"
          mkdir -p artifacts
          mv "${PKG_NAME}.tar.gz" artifacts

      - uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: artifacts/tflite_beam-*.tar.gz
